import { OptionsFormat } from './options';
import { Editor } from 'slate';
/**
 * Returns the core of the plugin, limited to the validation and normalization
 * part of `@guestbell/slate-edit-list`, and utils.
 *
 * Import this directly: `import EditListCore from '@guestbell/slate-edit-list/lib/core'`
 * if you don't care about behavior/rendering.
 */
declare function core(opts?: OptionsFormat): {
    schema: Object;
    normalizeNode: (node: import("slate").Node) => void | ((editor: Editor) => any);
    utils: {
        getCurrentItem: (value: import("slate").Value, block?: import("slate").Block) => import("slate").Block;
        getCurrentList: (value: import("slate").Value, block?: import("slate").Block) => import("slate").Block;
        getItemDepth: (value: import("slate").Value, block?: import("slate").Block) => number;
        getItemsAtRange: (value: import("slate").Value, range?: import("slate").Selection | import("slate").Range) => import("immutable").List<import("slate").Block>;
        getPreviousItem: (value: import("slate").Value, block?: import("slate").Block) => import("slate").Block;
        isList: (node: import("slate").Block | import("slate").Inline) => boolean;
        isSelectionInList: (value: import("slate").Value, type?: string) => boolean;
    };
    changes: {
        decreaseItemDepth: (_editor: Editor) => Editor;
        increaseItemDepth: (_editor: Editor) => Editor;
        splitListItem: (_editor: Editor) => Editor;
        unwrapList: (_editor: Editor) => Editor;
        wrapInList: (editor: Editor, type?: string, data?: Object | import("slate").Data) => Editor;
    };
};
export default core;
//# sourceMappingURL=core.d.ts.map