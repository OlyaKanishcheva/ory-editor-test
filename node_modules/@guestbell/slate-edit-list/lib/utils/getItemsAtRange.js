"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var isList_1 = __importDefault(require("./isList"));
var getCurrentItem_1 = __importDefault(require("./getCurrentItem"));
/**
 * Return the list of items at the given range. The returned items are
 * the highest list item blocks that cover the range.
 *
 * Returns an empty list if no list of items can cover the range
 */
var getItemsAtRange = function (opts) { return function (value, range) {
    range = range || value.selection;
    if (!range.start.key) {
        return immutable_1.List();
    }
    var document = value.document;
    var startBlock = document.getClosestBlock(range.start.key);
    var endBlock = document.getClosestBlock(range.end.key);
    if (startBlock === endBlock) {
        var item = getCurrentItem_1.default(opts)(value, startBlock);
        return item ? immutable_1.List([item]) : immutable_1.List();
    }
    var ancestor = document.getCommonAncestor(startBlock.key, endBlock.key);
    if (isList_1.default(opts)(ancestor)) {
        var startPath = ancestor.getPath(startBlock.key);
        var endPath = ancestor.getPath(endBlock.key);
        return ancestor.nodes.slice(startPath[0], endPath[0] + 1);
    }
    else if (ancestor.type === opts.typeItem) {
        // The ancestor is the highest list item that covers the range
        return immutable_1.List([ancestor]);
    }
    // No list of items can cover the range
    return immutable_1.List();
}; };
exports.default = getItemsAtRange;
//# sourceMappingURL=getItemsAtRange.js.map