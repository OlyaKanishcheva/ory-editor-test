"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var options_1 = __importDefault(require("./options"));
var handlers_1 = require("./handlers");
var core_1 = __importDefault(require("./core"));
var KEY_ENTER = 'Enter';
var KEY_TAB = 'Tab';
var KEY_BACKSPACE = 'Backspace';
/**
 * A Slate plugin to handle keyboard events in lists.
 */
function EditList(
// Options for the plugin
opts) {
    if (opts === void 0) { opts = {}; }
    var _opts = new options_1.default(opts);
    var corePlugin = core_1.default(opts);
    return __assign({}, corePlugin, { onKeyDown: onKeyDown(_opts) });
}
/**
 * User is pressing a key in the editor
 */
var onKeyDown = function (opts) { return function (event, editor, 
// tslint:disable-next-line:no-any
next) {
    var _event = event;
    switch (_event.key) {
        case KEY_ENTER:
            return handlers_1.onEnter(_event, editor, opts, next);
        case KEY_TAB:
            return handlers_1.onTab(_event, editor, opts, next);
        case KEY_BACKSPACE:
            return handlers_1.onBackspace(_event, editor, opts, next);
        default:
            return next();
    }
}; };
exports.default = EditList;
//# sourceMappingURL=index.js.map