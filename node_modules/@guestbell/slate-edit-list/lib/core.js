"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bindAndScopeChange_1 = require("@guestbell/slate-common/lib/utils/bindAndScopeChange");
var options_1 = __importDefault(require("./options"));
var validation_1 = require("./validation");
var changes_1 = require("./changes");
var utils_1 = require("./utils");
/**
 * Returns the core of the plugin, limited to the validation and normalization
 * part of `@guestbell/slate-edit-list`, and utils.
 *
 * Import this directly: `import EditListCore from '@guestbell/slate-edit-list/lib/core'`
 * if you don't care about behavior/rendering.
 */
function core(
// Options for the plugin
opts) {
    if (opts === void 0) { opts = {}; }
    var _opts = new options_1.default(opts);
    return {
        schema: validation_1.schema(_opts),
        normalizeNode: validation_1.normalizeNode(_opts),
        // tslint:disable-next-line:no-console
        // normalizeNode: node => console.log('normalizeNode: ', node),
        utils: {
            getCurrentItem: utils_1.getCurrentItem(_opts),
            getCurrentList: utils_1.getCurrentList(_opts),
            getItemDepth: utils_1.getItemDepth(_opts),
            getItemsAtRange: utils_1.getItemsAtRange(_opts),
            getPreviousItem: utils_1.getPreviousItem(_opts),
            isList: utils_1.isList(_opts),
            isSelectionInList: utils_1.isSelectionInList(_opts),
        },
        changes: {
            decreaseItemDepth: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.decreaseItemDepth),
            increaseItemDepth: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.increaseItemDepth),
            splitListItem: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.splitListItem),
            unwrapList: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.unwrapList),
            wrapInList: changes_1.wrapInList(_opts),
        },
    };
}
var bindAndScopeChangeCondition = function (opts, editor) {
    return utils_1.isSelectionInList(opts)(editor.value);
};
exports.default = core;
//# sourceMappingURL=core.js.map