"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var slate_1 = require("slate");
var utils_1 = require("../utils");
/**
 * Increase the depth of the current item by putting it in a sub-list
 * of previous item.
 * For first items in a list, does nothing.
 */
function increaseItemDepth(opts, editor) {
    var previousItem = utils_1.getPreviousItem(opts)(editor.value);
    var currentItem = utils_1.getCurrentItem(opts)(editor.value);
    if (!previousItem) {
        return editor;
    }
    if (!currentItem) {
        return editor;
    }
    // Move the item in the subList of previous item
    return moveAsSubItem(opts, editor, currentItem, previousItem.key);
}
/**
 * Move the given item to the subList at the end of destination item,
 * creating a subList if needed.
 */
function moveAsSubItem(opts, editor, 
// The list item to add
item, 
// The key of the destination node
destKey) {
    var destination = editor.value.document.getDescendant(destKey);
    var lastIndex = destination.nodes.size;
    var lastChild = destination.nodes.last();
    // The potential existing last child list
    var existingList = utils_1.isList(opts)(lastChild) ? lastChild : null;
    if (existingList) {
        return editor.moveNodeByKey(item.key, existingList.key, existingList.nodes.size // as last item
        );
    }
    var currentList = utils_1.getListForItem(opts)(editor.value, destination);
    if (!currentList) {
        throw new Error('Destination is not in a list');
    }
    var newSubList = slate_1.Block.create({
        object: 'block',
        type: currentList.type,
        data: currentList.data,
    });
    newSubList.validate(editor);
    return editor.withoutNormalizing(function () {
        editor.insertNodeByKey(destKey, lastIndex, newSubList);
        editor.moveNodeByKey(item.key, newSubList.key, 0);
    });
}
exports.default = increaseItemDepth;
//# sourceMappingURL=increaseItemDepth.js.map