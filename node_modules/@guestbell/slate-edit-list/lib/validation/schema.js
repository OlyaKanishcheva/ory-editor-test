"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Create a schema definition with rules to normalize lists
 */
function schema(opts) {
    var _a;
    var constructedSchema = {
        blocks: (_a = {},
            _a[opts.typeItem] = {
                parent: opts.types.map(function (t) { return ({ type: t }); }),
                nodes: [{ match: { object: 'block' } }],
                normalize: normalize({
                    parent_type_invalid: function (editor, context) {
                        editor.withoutNormalizing(function () {
                            editor.unwrapNodeByKey(context.node.key);
                        });
                    },
                    child_object_invalid: function (editor, context) {
                        wrapChildrenInDefaultBlock(opts, editor, context.node);
                    },
                }),
            },
            _a),
    };
    // validate all list types, ensure they only have list item children
    opts.types.forEach(function (type) {
        constructedSchema.blocks[type] = {
            nodes: [{ match: { type: opts.typeItem } }],
            normalize: normalize({
                child_type_invalid: function (editor, context) {
                    editor.withoutNormalizing(function () {
                        editor.wrapBlockByKey(context.child.key, opts.typeItem);
                    });
                },
            }),
        };
    });
    return constructedSchema;
}
/*
 * Allows to define a normalize function through a keyed collection of functions
 */
function normalize(reasons) {
    // tslint:disable-next-line:no-any
    return function (editor, error) {
        var reasonFn = reasons[error.code];
        if (reasonFn) {
            reasonFn(editor, error);
        }
    };
}
/**
 * Wraps all child of a node in the default block type.
 * Returns a change, for chaining purposes
 */
function wrapChildrenInDefaultBlock(opts, editor, node) {
    editor.withoutNormalizing(function () {
        editor.wrapBlockByKey(node.nodes.first().key, opts.typeDefault);
    });
    var wrapper = editor.value.document.getDescendant(node.key).nodes.first();
    // Add in the remaining items
    node.nodes.rest().forEach(function (child, index) {
        editor.withoutNormalizing(function () {
            editor.moveNodeByKey(child.key, wrapper.key, index + 1);
        });
    });
    return editor;
}
exports.default = schema;
//# sourceMappingURL=schema.js.map