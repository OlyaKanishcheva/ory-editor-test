{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cell_1 = require(\"../../actions/cell\");\n\nvar order_1 = require(\"./helper/order\");\n\nvar tree_1 = require(\"./helper/tree\");\n\nvar tree_2 = require(\"./tree\");\n\nvar editable_1 = require(\"../../types/editable\");\n\nexports.rawEditableReducer = function (state, action) {\n  if (state === void 0) {\n    state = {\n      id: null,\n      cells: [],\n      config: {\n        whitelist: []\n      }\n    };\n  }\n\n  var newCells = tree_1.decorate(tree_2.cells(state.cells, action)); // eslint-disable-next-line default-case\n\n  switch (action.type) {\n    case cell_1.CELL_CREATE_FALLBACK:\n      if (action.editable === state.id) {\n        var c = __assign({}, editable_1.createCell(), {\n          content: {\n            plugin: action.fallback,\n            state: action.fallback.createInitialState()\n          },\n          id: action.ids[0]\n        });\n\n        newCells = tree_1.decorate(tree_2.cells([c], action));\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return __assign({}, state, {\n    cells: newCells,\n    cellOrder: order_1.cellOrder(newCells || [])\n  });\n};\n\nexports.editable = exports.rawEditableReducer;","map":null,"metadata":{},"sourceType":"script"}