{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar Button_1 = __importDefault(require(\"@material-ui/core/Button\"));\n\nvar CircularProgress_1 = __importDefault(require(\"@material-ui/core/CircularProgress\"));\n\nvar CloudUpload_1 = __importDefault(require(\"@material-ui/icons/CloudUpload\"));\n\nvar Error_1 = __importDefault(require(\"@material-ui/icons/Error\"));\n\nvar NO_FILE_ERROR_CODE = 1;\nvar BAD_EXTENSION_ERROR_CODE = 2;\nvar TOO_BIG_ERROR_CODE = 3;\nvar UPLOADING_ERROR_CODE = 4;\n\nvar ImageUpload =\n/** @class */\nfunction (_super) {\n  __extends(ImageUpload, _super);\n\n  function ImageUpload() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isUploading: false,\n      hasError: false,\n      errorText: '',\n      progress: 0\n    };\n\n    _this.hasExtension = function (fileName) {\n      var patternPart = _this.props.allowedExtensions ? _this.props.allowedExtensions.map(function (a) {\n        return a.toLowerCase();\n      }).join('|') : '';\n      var pattern = '(' + patternPart.replace(/\\./g, '\\\\.') + ')$';\n      return new RegExp(pattern, 'i').test(fileName.toLowerCase());\n    };\n\n    _this.handleError = function (errorCode) {\n      var errorText = '';\n\n      switch (errorCode) {\n        case NO_FILE_ERROR_CODE:\n          errorText = 'No file selected';\n          break;\n\n        case BAD_EXTENSION_ERROR_CODE:\n          errorText = 'Bad file type';\n          break;\n\n        case TOO_BIG_ERROR_CODE:\n          errorText = 'Too big';\n          break;\n\n        case UPLOADING_ERROR_CODE:\n          errorText = 'Error while uploading';\n          break;\n\n        default:\n          errorText = 'Unknown error';\n          break;\n      } // Need to flick \"isUploading\" because otherwise the handler doesn't fire properly\n\n\n      _this.setState({\n        hasError: true,\n        errorText: errorText,\n        isUploading: true\n      }, function () {\n        return _this.setState({\n          isUploading: false\n        });\n      });\n\n      setTimeout(function () {\n        return _this.setState({\n          hasError: false,\n          errorText: ''\n        });\n      }, 5000);\n    };\n\n    _this.handleFileSelected = function (e) {\n      if (!e.target.files || !e.target.files[0]) {\n        _this.handleError(NO_FILE_ERROR_CODE);\n\n        return;\n      }\n\n      var file = e.target.files[0];\n\n      if (!_this.hasExtension(file.name)) {\n        _this.handleError(BAD_EXTENSION_ERROR_CODE);\n\n        return;\n      }\n\n      if (file.size > _this.props.maxFileSize) {\n        _this.handleError(TOO_BIG_ERROR_CODE);\n\n        return;\n      }\n\n      if (_this.props.imageLoaded) {\n        _this.readFile(file).then(function (data) {\n          return _this.props.imageLoaded(data);\n        });\n      }\n\n      if (_this.props.imageUpload) {\n        _this.setState({\n          isUploading: true\n        });\n\n        _this.props.imageUpload(file, _this.handleReportProgress).then(function (resp) {\n          _this.setState({\n            progress: undefined,\n            isUploading: false\n          });\n\n          _this.props.imageUploaded && _this.props.imageUploaded(resp);\n        }).catch(function (error) {\n          _this.setState({\n            isUploading: false\n          });\n\n          _this.props.imageUploadError && _this.props.imageUploadError(error);\n        });\n      }\n    };\n\n    _this.handleFileUploadClick = function () {\n      return _this.fileInput.click();\n    };\n\n    _this.handleReportProgress = function (progress) {\n      return _this.setState({\n        progress: progress\n      });\n    };\n\n    _this.renderChildren = function () {\n      if (_this.state.isUploading) {\n        return React.createElement(CircularProgress_1.default, {\n          value: _this.state.progress,\n          size: 19\n        });\n      }\n\n      if (_this.state.hasError) {\n        return React.createElement(React.Fragment, null, _this.state.errorText, React.createElement(Error_1.default, {\n          style: {\n            marginLeft: '8px'\n          }\n        }));\n      }\n\n      return React.createElement(React.Fragment, null, _this.props.buttonContent, _this.props.icon);\n    };\n\n    return _this;\n  }\n\n  ImageUpload.prototype.readFile = function (file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader(); // Read the image via FileReader API and save image result in state.\n\n      reader.onload = function (e) {\n        // Add the file name to the data URL\n        // tslint:disable-next-line:no-any\n        var dataUrl = e.target.result;\n        dataUrl = dataUrl.replace(';base64', \";name=\" + file.name + \";base64\");\n        resolve({\n          file: file,\n          dataUrl: dataUrl\n        });\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  ImageUpload.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(React.Fragment, null, React.createElement(Button_1.default, {\n      disabled: this.state.isUploading,\n      variant: \"contained\",\n      color: this.state.hasError ? 'secondary' : 'primary',\n      onClick: this.handleFileUploadClick,\n      style: this.props.style\n    }, this.renderChildren()), !this.state.isUploading && React.createElement(\"input\", {\n      style: {\n        display: 'none'\n      },\n      ref: function ref(fileInput) {\n        return _this.fileInput = fileInput;\n      },\n      type: \"file\",\n      onChange: this.handleFileSelected\n    }));\n  };\n\n  ImageUpload.defaultProps = {\n    buttonContent: 'Upload image',\n    icon: React.createElement(CloudUpload_1.default, {\n      style: {\n        marginLeft: '8px'\n      }\n    }),\n    allowedExtensions: ['jpg', 'jpeg', 'png'],\n    maxFileSize: 5242880\n  };\n  return ImageUpload;\n}(React.Component);\n\nexports.default = ImageUpload;","map":null,"metadata":{},"sourceType":"script"}