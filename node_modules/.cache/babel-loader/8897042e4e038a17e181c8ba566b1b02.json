{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar FormatQuote_1 = __importDefault(require(\"@material-ui/icons/FormatQuote\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar slate_edit_blockquote_1 = __importDefault(require(\"@guestbell/slate-edit-blockquote\"));\n\nvar helpers_1 = require(\"../helpers\");\n\nvar Plugin_1 = __importDefault(require(\"./Plugin\"));\n\nexports.BLOCKQUOTE = 'BLOCKQUOTE/BLOCKQUOTE';\n\nvar BlockquotePlugin =\n/** @class */\nfunction (_super) {\n  __extends(BlockquotePlugin, _super);\n\n  function BlockquotePlugin(props) {\n    var _this = _super.call(this) || this;\n\n    _this.name = 'blockquote';\n    /*schema = {\n      nodes: {\n        [BLOCKQUOTE]: makeTagNode('blockquote'),\n      },\n    };*/\n\n    _this.plugins = [slate_edit_blockquote_1.default({\n      type: exports.BLOCKQUOTE,\n      typeDefault: _this.DEFAULT_NODE\n    })]; // eslint-disable-next-line react/display-name\n\n    _this.Button = function (_a) {\n      var editorState = _a.editorState,\n          editor = _a.editor;\n\n      var onClick = function onClick(e) {\n        e.preventDefault();\n\n        var _isActive = editorState.blocks.some(function (block) {\n          return Boolean(editorState.document.getClosest(block.key, function (parent) {\n            return parent.type === exports.BLOCKQUOTE;\n          }));\n        });\n\n        if (_isActive) {\n          editor.unwrapBlock(exports.BLOCKQUOTE);\n        } else {\n          editor.wrapBlock(exports.BLOCKQUOTE);\n        }\n      };\n\n      var isActive = editorState.blocks.some(function (block) {\n        return Boolean(editorState.document.getClosest(block.key, function (parent) {\n          return parent.type === exports.BLOCKQUOTE;\n        }));\n      });\n      return React.createElement(helpers_1.ToolbarButton, {\n        onClick: onClick,\n        isActive: isActive,\n        icon: React.createElement(FormatQuote_1.default, null)\n      });\n    };\n\n    _this.deserialize = function (el, next) {\n      switch (el.tagName.toLowerCase()) {\n        case 'blockquote':\n          return {\n            object: 'block',\n            type: exports.BLOCKQUOTE,\n            nodes: next(el.childNodes)\n          };\n\n        default:\n          return;\n      }\n    };\n\n    _this.serialize = function ( // tslint:disable-next-line:no-any\n    object, // tslint:disable-next-line:no-any\n    children) {\n      if (object.object !== 'block') {\n        return;\n      }\n\n      switch (object.type) {\n        case exports.BLOCKQUOTE:\n          return React.createElement(\"blockquote\", {\n            style: {\n              textAlign: object.data.get('align')\n            }\n          }, children);\n\n        default:\n          return;\n      }\n    };\n\n    _this.renderNode = function (props, editor, next) {\n      switch (props.node.type) {\n        case exports.BLOCKQUOTE:\n          {\n            return React.createElement(\"blockquote\", {\n              style: {\n                textAlign: props.node.data.get('align')\n              }\n            }, props.children);\n          }\n\n        default:\n          return next();\n      }\n    };\n\n    _this.DEFAULT_NODE = props.DEFAULT_NODE;\n    _this.toolbarButtons = [_this.Button];\n    return _this;\n  }\n\n  return BlockquotePlugin;\n}(Plugin_1.default);\n\nexports.default = BlockquotePlugin;","map":null,"metadata":{},"sourceType":"script"}