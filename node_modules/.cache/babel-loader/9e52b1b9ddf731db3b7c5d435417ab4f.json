{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar semver_1 = __importDefault(require(\"semver\"));\n/**\n * @class the class used to migrate plugin content between toVersion\n */\n\n\nvar Migration =\n/** @class */\nfunction () {\n  function Migration(config) {\n    // tslint:disable-next-line:no-any\n    this.migrate = function (state) {\n      return state;\n    };\n\n    var toVersion = config.toVersion,\n        migrate = config.migrate,\n        fromVersionRange = config.fromVersionRange;\n\n    if (!migrate || !toVersion || !fromVersionRange || semver_1.default.valid(toVersion) === null || semver_1.default.validRange(fromVersionRange) === null) {\n      throw new Error(\"A migration toVersion, fromVersionRange and migrate function must be defined, got \" + JSON.stringify(config));\n    }\n\n    this.toVersion = toVersion;\n    this.migrate = migrate;\n    this.fromVersionRange = fromVersionRange;\n  }\n\n  return Migration;\n}();\n\nexports.Migration = Migration;\n/**\n * @class the abstract class for content and layout plugins. It will be instantiated once and used for every cell that is equipped with it.\n */\n// tslint:disable-next-line:no-any\n\nvar Plugin =\n/** @class */\nfunction () {\n  // tslint:disable-next-line:no-any\n  function Plugin(config) {\n    /**\n     * Serialize a the plugin state\n     *\n     * @param raw the raw state.\n     * @returns the serialized state.\n     */\n    this.serialize = function (raw) {\n      return raw;\n    };\n    /**\n     * Unserialize the plugin state.\n     *\n     * @param state the plugin state.\n     * @returns the unserialized state.\n     */\n\n\n    this.unserialize = function (state) {\n      return state;\n    };\n    /**\n     * Will be called when the user presses the delete key. When returning a resolving promise,\n     * the cell will be removed. If the promise is rejected, nothing happens.\n     *\n     * @param e\n     * @param props\n     * @returns a promise\n     */\n\n\n    this.handleRemoveHotKey = function (e, props) {\n      return Promise.reject();\n    };\n    /**\n     * Will be called when the user presses the right or down key. When returning a resolving promise,\n     * the next cell will be focused. If the promise is rejected, focus stays the same.\n     *\n     * @param e\n     * @param props\n     * @returns a promise\n     */\n\n\n    this.handleFocusNextHotKey = function (e, props) {\n      return Promise.resolve();\n    };\n    /**\n     * Will be called when the user presses the left or up key. When returning a resolving promise,\n     * the next cell will be focused. If the promise is rejected, focus stays the same.\n     *\n     * @param e\n     * @param props\n     * @returns a promise\n     */\n\n\n    this.handleFocusPreviousHotKey = function (e, props) {\n      return Promise.resolve();\n    };\n    /**\n     * This function will be called when one of the plugin's cell is blurred.\n     *\n     * @param props\n     */\n\n\n    this.handleFocus = function (props, focusSource, ref) {\n      return null;\n    };\n    /**\n     * This function will be called when one of the plugin's cell is focused.\n     *\n     * @param props\n     */\n\n\n    this.handleBlur = function (props) {\n      return null;\n    };\n    /**\n     * Specify a custom reducer for the plugin's cell.\n     *\n     * @param state\n     * @param action\n     */\n    // tslint:disable-next-line:no-any\n\n\n    this.reducer = function (state, action) {\n      return state;\n    };\n\n    var name = config.name,\n        version = config.version,\n        Component = config.Component,\n        IconComponent = config.IconComponent,\n        text = config.text,\n        StaticComponent = config.StaticComponent,\n        serialize = config.serialize,\n        unserialize = config.unserialize,\n        description = config.description,\n        handleRemoveHotKey = config.handleRemoveHotKey,\n        handleFocusNextHotKey = config.handleFocusNextHotKey,\n        handleFocusPreviousHotKey = config.handleFocusPreviousHotKey,\n        handleFocus = config.handleFocus,\n        handleBlur = config.handleBlur,\n        reducer = config.reducer,\n        migrations = config.migrations;\n\n    if (!name || !version || !Component) {\n      throw new Error(\"A plugin's version, name and Component must be defined, got \" + JSON.stringify(config));\n    }\n\n    this.name = name;\n    this.version = version;\n    this.Component = Component;\n    this.StaticComponent = StaticComponent;\n    this.IconComponent = IconComponent;\n    this.text = text;\n    this.description = description;\n    this.config = config;\n    this.migrations = migrations ? migrations : [];\n    this.serialize = serialize ? serialize.bind(this) : this.serialize;\n    this.unserialize = unserialize ? unserialize.bind(this) : this.unserialize;\n    this.handleRemoveHotKey = handleRemoveHotKey ? handleRemoveHotKey.bind(this) : this.handleRemoveHotKey;\n    this.handleFocusNextHotKey = handleFocusNextHotKey ? handleFocusNextHotKey.bind(this) : this.handleFocusNextHotKey;\n    this.handleFocusPreviousHotKey = handleFocusPreviousHotKey ? handleFocusPreviousHotKey.bind(this) : this.handleFocusPreviousHotKey;\n    this.handleFocus = handleFocus ? handleFocus.bind(this) : this.handleFocus;\n    this.handleBlur = handleBlur ? handleBlur.bind(this) : this.handleBlur;\n    this.reducer = reducer ? reducer.bind(this) : this.reducer;\n  }\n\n  return Plugin;\n}();\n\nexports.Plugin = Plugin;\n/**\n * @class this is the base class for content plugins.\n */\n// tslint:disable-next-line:no-any\n\nvar ContentPlugin =\n/** @class */\nfunction (_super) {\n  __extends(ContentPlugin, _super); // tslint:disable-next-line:no-any\n\n\n  function ContentPlugin(config) {\n    var _this = _super.call(this, config) || this;\n    /**\n     * Create the plugin's initial state.\n     *\n     * @returns the initial state.\n     */\n\n\n    _this.createInitialState = function () {\n      return {};\n    };\n    /**\n     * Specify a custom reducer for the plugin's cell.\n     *\n     * @param state\n     * @param action\n     */\n    // tslint:disable-next-line:no-any\n\n\n    _this.reducer = function (state, action) {\n      return state;\n    };\n\n    var createInitialState = config.createInitialState,\n        _a = config.allowInlineNeighbours,\n        allowInlineNeighbours = _a === void 0 ? false : _a,\n        _b = config.isInlineable,\n        isInlineable = _b === void 0 ? false : _b;\n    _this.isInlineable = isInlineable;\n    _this.allowInlineNeighbours = allowInlineNeighbours;\n    _this.createInitialState = createInitialState ? createInitialState.bind(_this) : _this.createInitialState;\n    return _this;\n  }\n\n  return ContentPlugin;\n}(Plugin);\n\nexports.ContentPlugin = ContentPlugin;\n/**\n * @class this is the base class for layout plugins.\n */\n// tslint:disable-next-line:no-any\n\nvar LayoutPlugin =\n/** @class */\nfunction (_super) {\n  __extends(LayoutPlugin, _super);\n\n  function LayoutPlugin(config) {\n    var _this = _super.call(this, config) || this;\n    /**\n     * Create the plugin's initial state.\n     *\n     * @returns the initial state.\n     */\n\n\n    _this.createInitialState = function () {\n      return {};\n    };\n    /**\n     * Create the plugin's initial children (rows/cells).\n     *\n     * @returns the initial state.\n     */\n    // tslint:disable-next-line:no-any\n\n\n    _this.createInitialChildren = function () {\n      return {};\n    };\n\n    var createInitialState = config.createInitialState,\n        createInitialChildren = config.createInitialChildren;\n    _this.createInitialState = createInitialState ? createInitialState.bind(_this) : _this.createInitialState;\n    _this.createInitialChildren = createInitialChildren ? createInitialChildren.bind(_this) : _this.createInitialChildren;\n    return _this;\n  }\n\n  return LayoutPlugin;\n}(Plugin);\n\nexports.LayoutPlugin = LayoutPlugin;\n\nvar NativePlugin =\n/** @class */\nfunction (_super) {\n  __extends(NativePlugin, _super); // tslint:disable-next-line:no-any\n\n\n  function NativePlugin(config) {\n    var _this = _super.call(this, config) || this;\n    /**\n     * Create the plugin's initial children (rows/cells).\n     *\n     * @returns the initial state.\n     */\n\n\n    _this.createInitialChildren = function () {\n      return {};\n    };\n    /**\n     * Create the plugin's initial state.\n     *\n     * @returns the initial state.\n     */\n\n\n    _this.createInitialState = function () {\n      return {};\n    };\n\n    var createInitialState = config.createInitialState,\n        _a = config.allowInlineNeighbours,\n        allowInlineNeighbours = _a === void 0 ? false : _a,\n        _b = config.isInlineable,\n        isInlineable = _b === void 0 ? false : _b,\n        createInitialChildren = config.createInitialChildren,\n        _c = config.type,\n        type = _c === void 0 ? 'content' : _c;\n    _this.isInlineable = isInlineable;\n    _this.allowInlineNeighbours = allowInlineNeighbours;\n    _this.createInitialState = createInitialState ? createInitialState.bind(_this) : _this.createInitialState;\n    _this.createInitialChildren = createInitialChildren ? createInitialChildren.bind(_this) : _this.createInitialChildren;\n    _this.type = type;\n    return _this;\n  }\n\n  return NativePlugin;\n}(Plugin);\n\nexports.NativePlugin = NativePlugin;","map":null,"metadata":{},"sourceType":"script"}