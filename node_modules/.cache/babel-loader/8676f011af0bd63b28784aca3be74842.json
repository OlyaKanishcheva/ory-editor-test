{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid = __importStar(require(\"uuid\"));\n\nexports.CELL_INSERT_ABOVE = 'CELL_INSERT_ABOVE';\nexports.CELL_INSERT_BELOW = 'CELL_INSERT_BELOW';\nexports.CELL_INSERT_LEFT_OF = 'CELL_INSERT_LEFT_OF';\nexports.CELL_INSERT_RIGHT_OF = 'CELL_INSERT_RIGHT_OF';\nexports.CELL_INSERT_INLINE_LEFT = 'CELL_INSERT_INLINE_LEFT';\nexports.CELL_INSERT_INLINE_RIGHT = 'CELL_INSERT_INLINE_RIGHT';\n\nvar gen = function gen(c) {\n  if (c === void 0) {\n    c = 1;\n  }\n\n  var ret = [];\n\n  for (var i = 0; i <= c; i++) {\n    ret.push(uuid.v4());\n  }\n\n  return ret;\n};\n\nvar insert = function insert(type) {\n  return function (item, _a, level, ids) {\n    var hover = _a.id,\n        inline = _a.inline,\n        hasInlineNeighbour = _a.hasInlineNeighbour;\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    if (ids === void 0) {\n      ids = [];\n    }\n\n    var l = level;\n\n    switch (type) {\n      case exports.CELL_INSERT_ABOVE:\n      case exports.CELL_INSERT_BELOW:\n        {\n          if ((inline || hasInlineNeighbour) && level < 1) {\n            l = 1;\n          }\n\n          break;\n        }\n\n      case exports.CELL_INSERT_LEFT_OF:\n      case exports.CELL_INSERT_RIGHT_OF:\n        {\n          if ((inline || hasInlineNeighbour) && level < 1) {\n            l = 1;\n          }\n\n          break;\n        }\n\n      default:\n    }\n\n    return {\n      type: type,\n      ts: new Date(),\n      item: item,\n      hover: hover,\n      level: l,\n      ids: ids.length > 0 ? ids : gen(5)\n    };\n  };\n};\n/**\n * Insert a cell below of the hovering cell.\n */\n\n\nexports.insertCellBelow = insert(exports.CELL_INSERT_BELOW);\n/**\n * Insert a cell above of the hovering cell.\n */\n\nexports.insertCellAbove = insert(exports.CELL_INSERT_ABOVE);\n/**\n * Insert a cell right of the hovering cell.\n */\n\nexports.insertCellRightOf = insert(exports.CELL_INSERT_RIGHT_OF);\n/**\n * Insert a cell left of the hovering cell.\n */\n\nexports.insertCellLeftOf = insert(exports.CELL_INSERT_LEFT_OF);\n/**\n * Insert a cell inside the hovering cell, on the left.\n */\n\nexports.insertCellLeftInline = insert(exports.CELL_INSERT_INLINE_LEFT);\n/**\n * Insert a cell inside the hovering cell, on the right.\n */\n\nexports.insertCellRightInline = insert(exports.CELL_INSERT_INLINE_RIGHT);\nexports.insertActions = {\n  insertCellRightInline: exports.insertCellRightInline,\n  insertCellLeftInline: exports.insertCellLeftInline,\n  insertCellLeftOf: exports.insertCellLeftOf,\n  insertCellRightOf: exports.insertCellRightOf,\n  insertCellAbove: exports.insertCellAbove,\n  insertCellBelow: exports.insertCellBelow,\n  insert: insert\n};","map":null,"metadata":{},"sourceType":"script"}