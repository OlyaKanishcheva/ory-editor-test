{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helpers_1 = require(\"../helpers\");\n\nexports.CELL_UPDATE_CONTENT = 'CELL_UPDATE_CONTENT';\nexports.CELL_UPDATE_LAYOUT = 'CELL_UPDATE_LAYOUT';\nexports.CELL_REMOVE = 'CELL_REMOVE';\nexports.CELL_RESIZE = 'CELL_RESIZE';\nexports.CELL_FOCUS = 'CELL_FOCUS';\nexports.CELL_BLUR = 'CELL_BLUR';\nexports.CELL_BLUR_ALL = 'CELL_BLUR_ALL';\nexports.CELL_FOCUS_PREV = 'CELL_FOCUS_PREV';\nexports.CELL_FOCUS_NEXT = 'CELL_FOCUS_NEXT';\nexports.CELL_CREATE_FALLBACK = 'CELL_CREATE_FALLBACK';\n/**\n * An action creator for updating a cell's content data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\n\nexports.updateCellContent = function (id) {\n  return function (state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    return {\n      type: exports.CELL_UPDATE_CONTENT,\n      ts: new Date(),\n      id: id,\n      state: state\n    };\n  };\n};\n/**\n * An action creator for updating a cell's layout data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellLayout(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\n\n\nexports.updateCellLayout = function (id) {\n  return function (state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    return {\n      type: exports.CELL_UPDATE_LAYOUT,\n      ts: new Date(),\n      id: id,\n      state: state\n    };\n  };\n};\n/**\n * An action creator for removing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(removeCell(cell.id, ['1', '2', '3', '4', ...]))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {string} ids An array of IDs for new cells that might be created.\n * @return {Action}\n */\n\n\nexports.removeCell = function (id, ids) {\n  if (ids === void 0) {\n    ids = [];\n  }\n\n  return {\n    type: exports.CELL_REMOVE,\n    ts: new Date(),\n    id: id,\n    ids: ids.length > 0 ? ids : helpers_1.gen(1)\n  };\n};\n/**\n * An action creator for resizing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(resizeCell(cell.id)(size))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {number} size The cell's new size.\n * @return {Function}\n */\n\n\nexports.resizeCell = function (id) {\n  return function (size) {\n    if (size === void 0) {\n      size = 1;\n    }\n\n    return {\n      type: exports.CELL_RESIZE,\n      ts: new Date(),\n      id: id,\n      size: size\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\n\nexports.focusCell = function (id) {\n  return function (_a) {\n    var source = (_a === void 0 ? {} : _a).source;\n    return {\n      type: exports.CELL_FOCUS,\n      ts: new Date(),\n      id: id,\n      source: source\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\n\nexports.focusNextCell = function (id) {\n  return function () {\n    return {\n      type: exports.CELL_FOCUS_NEXT,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to focus a cell.\n */\n\n\nexports.focusPreviousCell = function (id) {\n  return function () {\n    return {\n      type: exports.CELL_FOCUS_PREV,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to blur a cell.\n */\n\n\nexports.blurCell = function (id) {\n  return function () {\n    return {\n      type: exports.CELL_BLUR,\n      ts: new Date(),\n      id: id\n    };\n  };\n};\n/**\n * Dispatch to blur all cells. For example when clicking on document body.\n */\n\n\nexports.blurAllCells = function () {\n  return {\n    type: exports.CELL_BLUR_ALL,\n    ts: new Date()\n  };\n};\n/**\n * Creates a fallback cell, usually done when an editable is empty.\n */\n\n\nexports.createFallbackCell = function ( // tslint:disable-next-line:no-any\nfallback, editable) {\n  return {\n    type: exports.CELL_CREATE_FALLBACK,\n    ts: new Date(),\n    editable: editable,\n    ids: helpers_1.gen(1),\n    fallback: fallback\n  };\n};\n\nexports.coreActions = {\n  createFallbackCell: exports.createFallbackCell,\n  blurAllCells: exports.blurAllCells,\n  blurCell: exports.blurCell,\n  focusPreviousCell: exports.focusPreviousCell,\n  focusNextCell: exports.focusNextCell,\n  focusCell: exports.focusCell,\n  resizeCell: exports.resizeCell,\n  removeCell: exports.removeCell,\n  updateCellLayout: exports.updateCellLayout,\n  updateCellContent: exports.updateCellContent\n};","map":null,"metadata":{},"sourceType":"script"}