{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar computeOrder = function computeOrder(_a) {\n  var rows = _a.rows,\n      cells = _a.cells,\n      _b = _a.content,\n      _c = (_b === void 0 ? {} : _b).plugin,\n      _d = (_c === void 0 ? {} : _c).name,\n      name = _d === void 0 ? '' : _d,\n      id = _a.id;\n  return [[{\n    id: id,\n    isLeaf: Boolean(name)\n  }]].concat((rows || []).map(computeOrder), (cells || []).map(computeOrder)).reduce(function (p, n) {\n    return p.concat(n);\n  }, []);\n}; // tslint:disable-next-line:no-any\n\n\nexports.cellOrder = function (os) {\n  return os.map(computeOrder) // tslint:disable-next-line:no-any\n  .reduce(function (p, n) {\n    return p.concat(n);\n  }, []);\n};","map":null,"metadata":{},"sourceType":"script"}