{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar react_redux_1 = require(\"react-redux\");\n\nvar redux_1 = require(\"redux\");\n\nvar reselect_1 = require(\"reselect\");\n\nvar cell_1 = require(\"../../../actions/cell\");\n\nvar display_1 = require(\"../../../selector/display\"); // TODO clean me up #157\n\n\nvar Content =\n/** @class */\nfunction (_super) {\n  __extends(Content, _super);\n\n  function Content() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onRef = function (ref) {\n      _this.ref = ref;\n    };\n\n    return _this;\n  }\n\n  Content.prototype.componentWillReceiveProps = function (nextProps) {\n    var was = this.props.node.focused;\n    var _a = nextProps.node,\n        is = _a.focused,\n        focusSource = _a.focusSource;\n\n    var editable = nextProps.editable,\n        id = nextProps.id,\n        _b = nextProps.node,\n        _c = _b.content,\n        _d = _c === void 0 ? {} : _c,\n        _e = _d.plugin,\n        _f = _e === void 0 ? {} : _e,\n        _g = _f.handleFocus,\n        handleFocus = _g === void 0 ? function () {\n      return null;\n    } : _g,\n        _h = _f.handleBlur,\n        handleBlur = _h === void 0 ? function () {\n      return null;\n    } : _h,\n        _j = _f.name,\n        name = _j === void 0 ? 'N/A' : _j,\n        _k = _f.version,\n        version = _k === void 0 ? 'N/A' : _k,\n        _l = _d.state,\n        state = _l === void 0 ? {} : _l,\n        focused = _b.focused; // FIXME this is really shitty because it will break when the state changes before the blur comes through, see #157\n    // tslint:disable-next-line:no-any\n\n\n    var pass = {\n      editable: editable,\n      id: id,\n      state: state,\n      focused: this.props.isEditMode && focused,\n      readOnly: !display_1.isEditMode,\n      onChange: this.props.updateCellContent,\n      name: name,\n      version: version,\n      isEditMode: nextProps.isEditMode,\n      isResizeMode: nextProps.isResizeMode,\n      isPreviewMode: nextProps.isPreviewMode,\n      isInsertMode: nextProps.isInsertMode,\n      isLayoutMode: nextProps.isLayoutMode\n    }; // Basically we check if the focus state changed and if yes, we execute the callback handler from the plugin, that\n    // can set some side effects.\n\n    if (!was && is) {\n      // We need this because otherwise we lose hotkey focus on elements like spoilers.\n      // This could probably be solved in an easier way by listening to window.document?\n      handleFocus(pass, focusSource, this.ref);\n    } else if (was && !is) {\n      handleBlur(pass);\n    }\n  };\n\n  Content.prototype.render = function () {\n    var _a = this.props,\n        editable = _a.editable,\n        id = _a.id,\n        _b = _a.node,\n        _c = _b.content,\n        _d = _c === void 0 ? {} : _c,\n        _e = _d.plugin,\n        _f = _e === void 0 ? {} : _e,\n        _g = _f.Component,\n        Component = _g === void 0 ? function () {\n      return null;\n    } : _g,\n        _h = _f.name,\n        name = _h === void 0 ? 'N/A' : _h,\n        _j = _f.version,\n        version = _j === void 0 ? 'N/A' : _j,\n        _k = _d.state,\n        state = _k === void 0 ? {} : _k,\n        focused = _b.focused;\n\n    var _l = this.props,\n        focusCell = _l.focusCell,\n        blurCell = _l.blurCell;\n    var focusProps;\n\n    if (!this.props.isPreviewMode) {\n      focusProps = {\n        onMouseDown: function onMouseDown() {\n          if (!focused) {\n            focusCell({\n              source: 'onMouseDown'\n            });\n          }\n\n          return true;\n        }\n      };\n    }\n\n    return React.createElement(\"div\", __assign({}, focusProps, {\n      tabIndex: \"-1\",\n      style: {\n        outline: 'none'\n      },\n      ref: this.onRef,\n      className: \"ory-cell-inner ory-cell-leaf\"\n    }), React.createElement(Component, {\n      editable: editable,\n      id: id,\n      state: state,\n      focused: this.props.isEditMode && focused,\n      name: name,\n      version: version,\n      readOnly: !this.props.isEditMode,\n      onChange: this.props.updateCellContent,\n      focus: focusCell,\n      blur: blurCell,\n      isInsertMode: this.props.isInsertMode,\n      isResizeMode: this.props.isResizeMode,\n      isPreviewMode: this.props.isPreviewMode,\n      isEditMode: this.props.isEditMode,\n      isLayoutMode: this.props.isLayoutMode\n    }));\n  };\n\n  return Content;\n}(React.PureComponent);\n\nvar mapStateToProps = reselect_1.createStructuredSelector({\n  isEditMode: display_1.isEditMode,\n  isLayoutMode: display_1.isLayoutMode,\n  isPreviewMode: display_1.isPreviewMode,\n  isInsertMode: display_1.isInsertMode,\n  isResizeMode: display_1.isResizeMode\n});\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _a) {\n  var id = _a.id;\n  return redux_1.bindActionCreators({\n    updateCellContent: cell_1.updateCellContent(id)\n  }, dispatch);\n};\n\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(Content);","map":null,"metadata":{},"sourceType":"script"}