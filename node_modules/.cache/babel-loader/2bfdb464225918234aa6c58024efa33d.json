{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar flatten_1 = __importDefault(require(\"ramda/src/flatten\"));\n\nvar head_1 = __importDefault(require(\"ramda/src/head\"));\n\nvar path_1 = __importDefault(require(\"ramda/src/path\"));\n\nvar pathOr_1 = __importDefault(require(\"ramda/src/pathOr\"));\n\nvar map_1 = __importDefault(require(\"ramda/src/map\"));\n\nvar reduce_1 = __importDefault(require(\"ramda/src/reduce\"));\n\nvar tail_1 = __importDefault(require(\"ramda/src/tail\"));\n\nvar takeWhile_1 = __importDefault(require(\"ramda/src/takeWhile\"));\n\nvar display_1 = require(\"../../../actions/display\");\n\nvar notSharp = function notSharp(c) {\n  return c !== '#';\n};\n\nexports.mergeRows = function (state) {\n  if (state.length < 2) {\n    return state;\n  }\n\n  var _a = reduce_1.default(function (_a, rowB) {\n    var rowsAcc = _a[0],\n        rowA = _a[1];\n    var numberOfCells = path_1.default(['cells', 'length']);\n\n    if (numberOfCells(rowA) !== 1 || numberOfCells(rowB) !== 1) {\n      return [rowsAcc.concat([__assign({}, rowA, {\n        id: takeWhile_1.default(notSharp, rowA.id).join('')\n      })]), rowB];\n    }\n\n    var cellA = rowA.cells[0];\n    var cellB = rowB.cells[0];\n    var pluginName = path_1.default(['content', 'plugin', 'name']);\n    var pluginVersion = path_1.default(['content', 'plugin', 'version']);\n    var pluginMerge = path_1.default(['content', 'plugin', 'merge']);\n\n    if (!pluginName(cellA) || !pluginName(cellB) || !pluginVersion(cellA) || !pluginVersion(cellB) || pluginName(cellA) !== pluginName(cellB) || pluginVersion(cellA) !== pluginVersion(cellB) || !pluginMerge(cellA)) {\n      return [rowsAcc.concat([__assign({}, rowA, {\n        id: takeWhile_1.default(notSharp, rowA.id).join('')\n      })]), rowB];\n    }\n\n    return [rowsAcc, __assign({}, rowA, {\n      id: takeWhile_1.default(notSharp, rowA.id).join(''),\n      cells: [__assign({}, cellA, {\n        id: takeWhile_1.default(notSharp, cellA.id).join(''),\n        content: __assign({}, cellA.content, {\n          state: pluginMerge(cellA)([pathOr_1.default({}, ['content', 'state'], cellA), pathOr_1.default({}, ['content', 'state'], cellB)])\n        })\n      })]\n    })];\n  }, [[], head_1.default(state)], tail_1.default(state)),\n      newCellsAcc = _a[0],\n      lastRow = _a[1];\n\n  return newCellsAcc.concat([lastRow]);\n};\n\nexports.splitRows = function (state) {\n  return flatten_1.default(map_1.default(function (row) {\n    if (!row.cells) {\n      return [row];\n    }\n\n    if (row.cells.length !== 1) {\n      return [row];\n    } // tslint:disable-next-line:no-shadowed-variable\n\n\n    var state = path_1.default(['cells', 0, 'content', 'state'], row);\n    var split = path_1.default(['cells', 0, 'content', 'plugin', 'split'], row);\n\n    if (!split) {\n      return [row];\n    } // tslint:disable-next-line:no-shadowed-variable\n\n\n    return split(state).map(function (state, i) {\n      return __assign({}, row, {\n        id: row.id + \"#\" + i,\n        cells: [__assign({}, row.cells[0], {\n          id: row.cells[0].id + \"#\" + i,\n          content: __assign({}, row.cells[0].content, {\n            state: state\n          })\n        })]\n      });\n    });\n  }, state));\n};\n\nexports.mergeDecorator = function (action) {\n  return function (state) {\n    if (action.type !== display_1.SET_DISPLAY_MODE) {\n      return state;\n    }\n\n    switch (action.mode) {\n      case 'edit':\n        return exports.mergeRows(state);\n\n      case 'insert':\n      case 'layout':\n        {\n          return exports.splitRows(state);\n        }\n\n      default:\n        return state;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}