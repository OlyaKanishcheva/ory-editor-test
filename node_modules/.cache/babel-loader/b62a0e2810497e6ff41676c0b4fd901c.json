{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar react_dnd_1 = require(\"react-dnd\");\n\nvar react_redux_1 = require(\"react-redux\");\n\nvar classnames_1 = __importDefault(require(\"classnames\"));\n\nvar drag_1 = require(\"../../../actions/cell/drag\");\n\nvar insert_1 = require(\"../../../actions/cell/insert\");\n\nvar dnd_1 = require(\"./helper/dnd\");\n\nvar Droppable =\n/** @class */\nfunction (_super) {\n  __extends(Droppable, _super);\n\n  function Droppable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Droppable.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        connectDropTarget = _b.connectDropTarget,\n        isLayoutMode = _b.isLayoutMode,\n        isInsertMode = _b.isInsertMode,\n        className = _b.className,\n        isLeaf = _b.isLeaf,\n        hover = _b.node.hover,\n        children = _b.children;\n\n    if (!(isLayoutMode || isInsertMode)) {\n      return React.createElement(\"div\", {\n        className: classnames_1.default(className, 'ory-cell-droppable-container')\n      }, children);\n    }\n\n    return connectDropTarget(React.createElement(\"div\", {\n      className: classnames_1.default(className, 'ory-cell-droppable', (_a = {\n        'ory-cell-droppable-is-over-current': hover\n      }, _a[\"ory-cell-droppable-is-over-\" + hover] = hover, _a['ory-cell-droppable-leaf'] = isLeaf, _a))\n    }, children));\n  };\n\n  return Droppable;\n}(React.PureComponent);\n\nvar mapDispatchToProps = __assign({}, drag_1.dragActions, insert_1.insertActions);\n\nexports.default = react_redux_1.connect(null, mapDispatchToProps)(react_dnd_1.DropTarget(function (_a) {\n  var dropTypes = _a.dropTypes;\n  return dropTypes;\n}, dnd_1.target, dnd_1.connect)(Droppable));","map":null,"metadata":{},"sourceType":"script"}