{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar const_1 = require(\"../../const\");\n\nexports.CELL_DRAG_HOVER = 'CELL_DRAG_HOVER';\nexports.CELL_DRAG = 'CELL_DRAG';\nexports.CELL_DRAG_CANCEL = 'CELL_DRAG_CANCEL';\nexports.CLEAR_CLEAR_HOVER = 'CLEAR_CLEAR_HOVER';\n/**\n * Creates a redux action for when a cell hovers another item.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHover(drag, hover, level, position))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @param {string} position Can be left, right, above, below.\n * @return {Action}\n */\n\nexports.cellHover = function (_a, _b, level, position) {\n  var drag = _a.id;\n  var hover = _b.id;\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  return {\n    type: exports.CELL_DRAG_HOVER,\n    ts: new Date(),\n    drag: drag,\n    hover: hover,\n    level: level,\n    position: position\n  };\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverLeftOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\n\nexports.cellHoverLeftOf = function (drag, hover, level) {\n  return exports.cellHover(drag, hover, level, const_1.PositionEnum.LEFT_OF);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the right.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverRightOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\n\nexports.cellHoverRightOf = function (drag, hover, level) {\n  return exports.cellHover(drag, hover, level, const_1.PositionEnum.RIGHT_OF);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell above.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverAbove(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\n\nexports.cellHoverAbove = function (drag, hover, level) {\n  return exports.cellHover(drag, hover, level, const_1.PositionEnum.ABOVE);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell below.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverBelow(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\n\n\nexports.cellHoverBelow = function (drag, hover, level) {\n  return exports.cellHover(drag, hover, level, const_1.PositionEnum.BELOW);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the left, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineLeft(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\n\n\nexports.cellHoverInlineLeft = function (drag, hover) {\n  return exports.cellHover(drag, hover, 0, const_1.PositionEnum.INLINE_LEFT);\n};\n/**\n * Creates a redux action for when a cell is hovering another cell on the right, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineRight(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\n\n\nexports.cellHoverInlineRight = function (drag, hover) {\n  return exports.cellHover(drag, hover, 0, const_1.PositionEnum.INLINE_RIGHT);\n};\n/**\n * Creates a redux action for when a cell is being dragged.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(dragCell(cell.id))\n *\n * @param {string} id The id of the cell that is being dragged.\n * @return {Action}\n */\n\n\nexports.dragCell = function (id) {\n  return {\n    type: exports.CELL_DRAG,\n    ts: new Date(),\n    id: id\n  };\n};\n/**\n * Creates a redux action to clear hover state of all cells.\n *\n * @return {Action}\n */\n\n\nexports.clearHover = function () {\n  return {\n    type: exports.CLEAR_CLEAR_HOVER,\n    ts: new Date()\n  };\n};\n/**\n * Creates a redux action for when cell dragging ends.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(cancelCellDrag(cell.id))\n *\n * @param {string} id\n * @return {Action}\n */\n\n\nexports.cancelCellDrag = function () {\n  return {\n    type: exports.CELL_DRAG_CANCEL,\n    ts: new Date()\n  };\n};\n\nexports.dragActions = {\n  cancelCellDrag: exports.cancelCellDrag,\n  clearHover: exports.clearHover,\n  dragCell: exports.dragCell,\n  cellHoverInlineRight: exports.cellHoverInlineRight,\n  cellHoverInlineLeft: exports.cellHoverInlineLeft,\n  cellHoverBelow: exports.cellHoverBelow,\n  cellHoverAbove: exports.cellHoverAbove,\n  cellHoverRightOf: exports.cellHoverRightOf,\n  cellHoverLeftOf: exports.cellHoverLeftOf,\n  cellHover: exports.cellHover\n};","map":null,"metadata":{},"sourceType":"script"}