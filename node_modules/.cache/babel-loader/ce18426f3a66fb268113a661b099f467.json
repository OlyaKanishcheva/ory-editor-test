{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n// tslint:disable:no-console\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar trace = function trace() {\n  var e = new Error('dummy');\n  return e.stack.replace(/^[^(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@').split('\\n');\n};\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n  /**\n   * Logs a warning. Warnings are things that are exceptional, but easily to recover from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.warn.apply(console, ['Warning:'].concat(args));\n  };\n  /**\n   * Logs a debug message. Debug messages are things that help developers debugging things.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, ['Debug:'].concat(args));\n  };\n  /**\n   * Logs an info. Infos are things that might be interesting for someone who needs to take a closer look.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, ['Info:'].concat(args));\n  };\n  /**\n   * Logs an error. Error are things that are exceptional, but can be recovered from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.error.apply(console, ['Error:'].concat(args));\n    console.error('Trace:', trace());\n  };\n  /**\n   * Logs a fatal error. Fatal errors are things that are exceptional and can not be recovered from.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.fatal = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.error.apply(console, ['Fatal:'].concat(args));\n    console.error('Trace:', trace());\n    throw new Error(args.join(' '));\n  };\n  /**\n   * Logs a message.\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log.apply(console, ['Fatal:'].concat(args));\n    console.log('Trace:', trace());\n  };\n\n  return Logger;\n}();\n\nexports.Logger = Logger;\nvar instance = new Logger();\nexports.default = instance;","map":null,"metadata":{},"sourceType":"script"}