{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar debug_1 = require(\"redux-undo/lib/debug\");\n\nvar redux_undo_1 = __importStar(require(\"redux-undo\"));\n\nvar editable_1 = require(\"../editable\");\n\nvar editables_1 = require(\"../../actions/editables\");\n\nvar core_1 = require(\"../../actions/cell/core\");\n\nvar const_1 = require(\"../../const\");\n\nvar insert_1 = require(\"../../actions/cell/insert\");\n\nif (!const_1.isProduction) {\n  debug_1.set(true);\n}\n\nvar inner = redux_undo_1.default(function ( // tslint:disable-next-line:no-any\nstate, action) {\n  if (state === void 0) {\n    state = [];\n  }\n\n  switch (action.type) {\n    default:\n      // tslint:disable-next-line:no-any\n      return state.map(function (e) {\n        return editable_1.editable(e, action);\n      });\n  }\n}, {\n  filter: redux_undo_1.includeAction([core_1.CELL_UPDATE_CONTENT, core_1.CELL_UPDATE_LAYOUT, core_1.CELL_REMOVE, core_1.CELL_RESIZE, insert_1.CELL_INSERT_ABOVE, insert_1.CELL_INSERT_BELOW, insert_1.CELL_INSERT_LEFT_OF, insert_1.CELL_INSERT_RIGHT_OF, insert_1.CELL_INSERT_INLINE_LEFT, insert_1.CELL_INSERT_INLINE_RIGHT]),\n  // initTypes: [UPDATE_EDITABLE],\n  neverSkipReducer: true\n});\n\nexports.editables = function (state, action) {\n  if (state === void 0) {\n    state = {\n      past: [],\n      present: [],\n      future: []\n    };\n  }\n\n  var _a = state.past,\n      past = _a === void 0 ? [] : _a,\n      _b = state.present,\n      present = _b === void 0 ? [] : _b,\n      _c = state.future,\n      future = _c === void 0 ? [] : _c;\n\n  switch (action.type) {\n    case editables_1.UPDATE_EDITABLE:\n      return inner({\n        past: past.map(function (e) {\n          return e.filter(function (_a) {\n            var id = _a.id;\n            return id !== action.editable.id;\n          }).concat([// we need to run the rawreducer once or the history initial state will be inconsistent.\n          // resolves https://github.com/ory/editor/pull/117#issuecomment-242942796\n          // ...past,\n          editable_1.editable(action.editable, action)]);\n        }),\n        present: inner(present.filter(function (_a) {\n          var id = _a.id;\n          return id !== action.editable.id;\n        }).concat([// we need to run the rawreducer once or the history initial state will be inconsistent.\n        // resolves https://github.com/ory/editor/pull/117#issuecomment-242942796\n        editable_1.editable(action.editable, action)]), undefined),\n        future: future\n      }, undefined);\n\n    default:\n      return inner(state, action);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}