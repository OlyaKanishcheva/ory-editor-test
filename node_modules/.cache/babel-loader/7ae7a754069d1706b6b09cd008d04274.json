{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar immutable_1 = require(\"immutable\");\n\nvar isList_1 = __importDefault(require(\"./isList\"));\n\nvar getCurrentItem_1 = __importDefault(require(\"./getCurrentItem\"));\n/**\r\n * Return the list of items at the given range. The returned items are\r\n * the highest list item blocks that cover the range.\r\n *\r\n * Returns an empty list if no list of items can cover the range\r\n */\n\n\nvar getItemsAtRange = function getItemsAtRange(opts) {\n  return function (value, range) {\n    range = range || value.selection;\n\n    if (!range.start.key) {\n      return immutable_1.List();\n    }\n\n    var document = value.document;\n    var startBlock = document.getClosestBlock(range.start.key);\n    var endBlock = document.getClosestBlock(range.end.key);\n\n    if (startBlock === endBlock) {\n      var item = getCurrentItem_1.default(opts)(value, startBlock);\n      return item ? immutable_1.List([item]) : immutable_1.List();\n    }\n\n    var ancestor = document.getCommonAncestor(startBlock.key, endBlock.key);\n\n    if (isList_1.default(opts)(ancestor)) {\n      var startPath = ancestor.getPath(startBlock.key);\n      var endPath = ancestor.getPath(endBlock.key);\n      return ancestor.nodes.slice(startPath[0], endPath[0] + 1);\n    } else if (ancestor.type === opts.typeItem) {\n      // The ancestor is the highest list item that covers the range\n      return immutable_1.List([ancestor]);\n    } // No list of items can cover the range\n\n\n    return immutable_1.List();\n  };\n};\n\nexports.default = getItemsAtRange;","map":null,"metadata":{},"sourceType":"script"}