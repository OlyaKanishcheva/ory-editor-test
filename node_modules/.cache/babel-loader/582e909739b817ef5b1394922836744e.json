{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar slate_1 = require(\"slate\");\n\nvar immutable_1 = require(\"immutable\");\n\nvar utils_1 = require(\"../utils\");\n/**\r\n * Wrap the blocks in the current selection in a new list. Selected\r\n * lists are merged together.\r\n */\n\n\nvar wrapInList = function wrapInList(opts) {\n  return function (editor, type, data) {\n    var selectedBlocks = getHighestSelectedBlocks(editor.value);\n    type = type || opts.types[0]; // Wrap in container\n\n    editor.withoutNormalizing(function () {\n      editor.wrapBlock({\n        type: type,\n        data: slate_1.Data.create(data)\n      });\n    }); // Wrap in list items\n\n    selectedBlocks.forEach(function (node) {\n      if (utils_1.isList(opts)(node)) {\n        // Merge its items with the created list\n        node.nodes.forEach(function (_a) {\n          var key = _a.key;\n          editor.withoutNormalizing(function () {\n            editor.unwrapNodeByKey(key);\n          });\n        });\n      } else {\n        editor.withoutNormalizing(function () {\n          editor.wrapBlockByKey(node.key, opts.typeItem);\n        });\n      }\n    });\n    return editor.normalize();\n  };\n};\n/**\r\n * Returns the highest list of blocks that cover the current selection\r\n */\n\n\nfunction getHighestSelectedBlocks(value) {\n  var range = value.selection;\n  var document = value.document;\n  var startBlock = document.getClosestBlock(range.start.key);\n  var endBlock = document.getClosestBlock(range.end.key);\n\n  if (startBlock === endBlock) {\n    return immutable_1.List([startBlock]);\n  }\n\n  var ancestor = document.getCommonAncestor(startBlock.key, endBlock.key);\n  var startPath = ancestor.getPath(startBlock.key);\n  var endPath = ancestor.getPath(endBlock.key);\n  return ancestor.nodes.slice(startPath[0], endPath[0] + 1);\n}\n\nexports.default = wrapInList;","map":null,"metadata":{},"sourceType":"script"}