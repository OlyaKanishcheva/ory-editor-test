{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar computeRowLevels = function computeRowLevels(a, b) {\n  var _a = a.cells,\n      cells = _a === void 0 ? [] : _a,\n      props = __rest(a, [\"cells\"]);\n\n  var _b = b || {},\n      _c = _b.left,\n      left = _c === void 0 ? 0 : _c,\n      _d = _b.right,\n      right = _d === void 0 ? 0 : _d,\n      _e = _b.above,\n      above = _e === void 0 ? 0 : _e,\n      _f = _b.below,\n      below = _f === void 0 ? 0 : _f;\n\n  var newCells = [];\n\n  if (cells.length) {\n    newCells = cells.map(function (c, k) {\n      return computeCellLevels(c, {\n        left: k === 0 ? left + 1 : 0,\n        right: k === cells.length - 1 ? right + 1 : 0,\n        above: above + 1,\n        below: below + 1\n      });\n    });\n  }\n\n  delete props.levels;\n  return __assign({\n    levels: {\n      left: left,\n      right: right,\n      above: above,\n      below: below\n    }\n  }, props, {\n    cells: newCells\n  });\n};\n\nvar computeCellLevels = function computeCellLevels(a, b) {\n  var _a = a.rows,\n      rows = _a === void 0 ? [] : _a,\n      props = __rest(a, [\"rows\"]);\n\n  var _b = b || {},\n      _c = _b.left,\n      left = _c === void 0 ? 0 : _c,\n      _d = _b.right,\n      right = _d === void 0 ? 0 : _d,\n      _e = _b.above,\n      above = _e === void 0 ? 0 : _e,\n      _f = _b.below,\n      below = _f === void 0 ? 0 : _f;\n\n  var newRows;\n\n  if (rows.length) {\n    newRows = rows.map(function (r, k) {\n      return computeRowLevels(r, {\n        left: left + 1,\n        right: right + 1,\n        above: k === 0 ? above + 1 : 0,\n        below: k === rows.length - 1 ? below + 1 : 0\n      });\n    });\n  }\n\n  delete props.levels; // eslint-disable-line prefer-reflect\n\n  return __assign({\n    levels: {\n      left: left,\n      right: right,\n      above: above,\n      below: below\n    }\n  }, props, {\n    rows: newRows\n  });\n};\n\nexports.computeDropLevels = function (c) {\n  return computeCellLevels(c);\n};","map":null,"metadata":{},"sourceType":"script"}