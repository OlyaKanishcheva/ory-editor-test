{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar redux_1 = require(\"redux\");\n\nvar core_1 = require(\"./cell/core\");\n\nvar drag_1 = require(\"./cell/drag\");\n\nvar insert_1 = require(\"./cell/insert\");\n\nvar undo_1 = require(\"./undo\");\n\nvar editables_1 = require(\"./editables\");\n\nvar display_1 = require(\"./display\");\n\nexports.actions = function (dispatch) {\n  return {\n    cell: {\n      updateContent: function updateContent(id, state) {\n        return dispatch(core_1.updateCellContent(id)(state));\n      },\n      updateLayout: function updateLayout(id, state) {\n        return dispatch(core_1.updateCellLayout(id)(state));\n      },\n      remove: redux_1.bindActionCreators({\n        removeCell: core_1.removeCell\n      }, dispatch).removeCell,\n      resize: function resize(id, size) {\n        return dispatch(core_1.resizeCell(id)(size));\n      },\n      focus: function focus(id, source) {\n        return dispatch(core_1.focusCell(id)(source));\n      },\n      focusNext: function focusNext(id) {\n        return dispatch(core_1.focusNextCell(id)());\n      },\n      focusPrevious: function focusPrevious(id) {\n        return dispatch(core_1.focusPreviousCell(id)());\n      },\n      blurAll: redux_1.bindActionCreators({\n        blurAllCells: core_1.blurAllCells\n      }, dispatch).blurAllCells,\n      drag: redux_1.bindActionCreators({\n        dragCell: drag_1.dragCell\n      }, dispatch).dragCell,\n      cancelDrag: redux_1.bindActionCreators({\n        cancelCellDrag: drag_1.cancelCellDrag\n      }, dispatch).cancelCellDrag,\n      hoverLeftOf: redux_1.bindActionCreators({\n        cellHoverLeftOf: drag_1.cellHoverLeftOf\n      }, dispatch).cellHoverLeftOf,\n      hoverRightOf: redux_1.bindActionCreators({\n        cellHoverRightOf: drag_1.cellHoverRightOf\n      }, dispatch).cellHoverRightOf,\n      hoverAbove: redux_1.bindActionCreators({\n        cellHoverAbove: drag_1.cellHoverAbove\n      }, dispatch).cellHoverAbove,\n      hoverBelow: redux_1.bindActionCreators({\n        cellHoverBelow: drag_1.cellHoverBelow\n      }, dispatch).cellHoverBelow,\n      hoverFloatingLeft: redux_1.bindActionCreators({\n        cellHoverInlineLeft: drag_1.cellHoverInlineLeft\n      }, dispatch).cellHoverInlineLeft,\n      hoverFloatingRight: redux_1.bindActionCreators({\n        cellHoverInlineRight: drag_1.cellHoverInlineRight\n      }, dispatch).cellHoverInlineRight,\n      clearHover: redux_1.bindActionCreators({\n        clearHover: drag_1.clearHover\n      }, dispatch).clearHover,\n      insertBelow: redux_1.bindActionCreators({\n        insertCellBelow: insert_1.insertCellBelow\n      }, dispatch).insertCellBelow,\n      insertAbove: redux_1.bindActionCreators({\n        insertCellAbove: insert_1.insertCellAbove\n      }, dispatch).insertCellAbove,\n      insertRightOf: redux_1.bindActionCreators({\n        insertCellRightOf: insert_1.insertCellRightOf\n      }, dispatch).insertCellRightOf,\n      insertLeftOf: redux_1.bindActionCreators({\n        insertCellLeftOf: insert_1.insertCellLeftOf\n      }, dispatch).insertCellLeftOf,\n      insertFloatingLeft: redux_1.bindActionCreators({\n        insertCellLeftInline: insert_1.insertCellLeftInline\n      }, dispatch).insertCellLeftInline,\n      insertFloatingRight: redux_1.bindActionCreators({\n        insertCellRightInline: insert_1.insertCellRightInline\n      }, dispatch).insertCellRightInline\n    },\n    editable: {\n      add: redux_1.bindActionCreators({\n        updateEditable: editables_1.updateEditable\n      }, dispatch).updateEditable,\n      update: redux_1.bindActionCreators({\n        updateEditable: editables_1.updateEditable\n      }, dispatch).updateEditable\n    },\n    mode: {\n      insert: redux_1.bindActionCreators({\n        insertMode: display_1.insertMode\n      }, dispatch).insertMode,\n      edit: redux_1.bindActionCreators({\n        editMode: display_1.editMode\n      }, dispatch).editMode,\n      preview: redux_1.bindActionCreators({\n        previewMode: display_1.previewMode\n      }, dispatch).previewMode,\n      layout: redux_1.bindActionCreators({\n        layoutMode: display_1.layoutMode\n      }, dispatch).layoutMode,\n      resize: redux_1.bindActionCreators({\n        resizeMode: display_1.resizeMode\n      }, dispatch).resizeMode\n    },\n    undo: redux_1.bindActionCreators({\n      undo: undo_1.undo\n    }, dispatch).undo,\n    redo: redux_1.bindActionCreators({\n      redo: undo_1.redo\n    }, dispatch).redo\n  };\n};","map":null,"metadata":{},"sourceType":"script"}