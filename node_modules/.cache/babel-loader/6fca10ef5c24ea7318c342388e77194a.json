{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pathOr_1 = __importDefault(require(\"ramda/src/pathOr\"));\n\nvar optimize_1 = require(\"./helper/optimize\");\n\nvar merge_1 = require(\"./helper/merge\");\n\nvar hover_1 = require(\"./helper/hover\");\n\nvar sizing_1 = require(\"./helper/sizing\");\n\nvar inline_1 = require(\"./helper/inline\");\n\nvar editable_1 = require(\"../../types/editable\");\n\nvar cell_1 = require(\"../../actions/cell\");\n\nvar inner = function inner(cb, action) {\n  return function (state) {\n    return cb(state, action);\n  };\n};\n\nvar identity = function identity(state) {\n  return state;\n};\n\nexports.cell = function (s, a) {\n  return optimize_1.optimizeCell(function (state, action) {\n    var reduce = function reduce() {\n      var content = pathOr_1.default(identity, ['content', 'plugin', 'reducer'], state);\n      var layout = pathOr_1.default(identity, ['layout', 'plugin', 'reducer'], state);\n      return content(layout(__assign({}, state, {\n        hover: null,\n        rows: exports.rows(state.rows, action)\n      }), action), action);\n    };\n\n    switch (action.type) {\n      case cell_1.CELL_UPDATE_CONTENT:\n        if (action.id === state.id) {\n          // If this cell is being updated, set the data\n          var reduced = reduce();\n          return __assign({}, reduced, {\n            content: __assign({}, state.content || {}, {\n              state: __assign({}, pathOr_1.default({}, ['content', 'state'], reduced), action.state)\n            })\n          });\n        }\n\n        return reduce();\n\n      case cell_1.CELL_UPDATE_LAYOUT:\n        if (action.id === state.id) {\n          // If this cell is being updated, set the data\n          var reduced = reduce();\n          return __assign({}, reduced, {\n            layout: __assign({}, state.layout || {}, {\n              state: __assign({}, pathOr_1.default({}, ['layout', 'state'], reduced), action.state)\n            })\n          });\n        }\n\n        return reduce();\n\n      case cell_1.CELL_FOCUS:\n        if (action.id === state.id) {\n          // If this cell is being focused, set the data\n          return __assign({}, reduce(), {\n            focused: true,\n            focusSource: action.source\n          });\n        }\n\n        return __assign({}, reduce(), {\n          focused: false,\n          focusSource: null\n        });\n\n      case cell_1.CELL_BLUR:\n        if (action.id === state.id) {\n          // If this cell is being blurred, set the data\n          return __assign({}, reduce(), {\n            focused: false,\n            focusSource: null\n          });\n        }\n\n        return reduce();\n\n      case cell_1.CELL_BLUR_ALL:\n        return __assign({}, reduce(), {\n          focused: false\n        });\n\n      case cell_1.CELL_DRAG_HOVER:\n        if (hover_1.isHoveringThis(state, action)) {\n          // if this is the cell we're hovering, set the hover attribute\n          return __assign({}, reduce(), {\n            hover: action.position\n          });\n        } // or remove it if not\n\n\n        return reduce();\n\n      case cell_1.CELL_INSERT_ABOVE:\n        if (hover_1.isHoveringThis(state, action)) {\n          return __assign({}, editable_1.createCell(), {\n            id: action.ids[0],\n            hover: null,\n            rows: exports.rows([__assign({}, editable_1.createRow(), {\n              id: action.ids[1],\n              cells: [__assign({}, action.item, {\n                id: action.ids[2],\n                inline: null\n              })]\n            }), __assign({}, editable_1.createRow(), {\n              id: action.ids[3],\n              cells: [__assign({}, reduce(), {\n                id: action.ids[4]\n              })]\n            })], __assign({}, action, {\n              hover: null\n            }))\n          });\n        }\n\n        return reduce();\n\n      case cell_1.CELL_INSERT_BELOW:\n        if (hover_1.isHoveringThis(state, action)) {\n          return __assign({}, editable_1.createCell(), {\n            id: action.ids[0],\n            hover: null,\n            rows: exports.rows([__assign({}, editable_1.createRow(), {\n              id: action.ids[1],\n              cells: [__assign({}, reduce(), {\n                id: action.ids[2]\n              })]\n            }), __assign({}, editable_1.createRow(), {\n              id: action.ids[3],\n              cells: [__assign({}, action.item, {\n                id: action.ids[4],\n                inline: null\n              })]\n            })], __assign({}, action, {\n              hover: null\n            }))\n          });\n        }\n\n        return reduce();\n\n      default:\n        return reduce();\n    }\n  }(s, a));\n};\n\nexports.cells = function (s, a) {\n  if (s === void 0) {\n    s = [];\n  }\n\n  return optimize_1.optimizeCells(function (state, action) {\n    switch (action.type) {\n      case cell_1.CELL_RESIZE:\n        // tslint:disable-next-line:no-any\n        return sizing_1.resizeCells(state.map(inner(exports.cell, action)), action);\n\n      case cell_1.CELL_INSERT_BELOW:\n      case cell_1.CELL_INSERT_ABOVE:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(inner(exports.cell, action));\n\n      case cell_1.CELL_INSERT_LEFT_OF:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          return hover_1.isHoveringThis(c, action) ? [__assign({}, action.item, {\n            id: action.ids[0],\n            inline: null\n          }), __assign({}, c, {\n            id: action.ids[1]\n          })] : [c];\n        }).reduce(optimize_1.flatten, []).map(inner(exports.cell, action));\n\n      case cell_1.CELL_INSERT_RIGHT_OF:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          return hover_1.isHoveringThis(c, action) ? [__assign({}, c, {\n            id: action.ids[0]\n          }), __assign({}, action.item, {\n            id: action.ids[1],\n            inline: null\n          })] : [c];\n        }).reduce(optimize_1.flatten, []).map(inner(exports.cell, action));\n\n      case cell_1.CELL_INSERT_INLINE_RIGHT:\n      case cell_1.CELL_INSERT_INLINE_LEFT:\n        return state.filter(function (c) {\n          return c.id !== action.item.id;\n        }).map(function (c) {\n          if (hover_1.isHoveringThis(c, action)) {\n            return [__assign({}, editable_1.createCell(), {\n              id: action.ids[0],\n              rows: [__assign({}, editable_1.createRow(), {\n                id: action.ids[1],\n                cells: [__assign({}, action.item, {\n                  inline: action.type === cell_1.CELL_INSERT_INLINE_RIGHT ? 'right' : 'left',\n                  id: action.ids[2],\n                  size: 0\n                }), __assign({}, c, {\n                  id: action.ids[3],\n                  inline: null,\n                  hasInlineNeighbour: action.ids[2],\n                  size: 0\n                })]\n              })]\n            })];\n          }\n\n          return [c];\n        }).reduce(optimize_1.flatten, []).map(inner(exports.cell, action));\n\n      case cell_1.CELL_REMOVE:\n        return state.filter(function (_a) {\n          var id = _a.id;\n          return id !== action.id;\n        }).map(inner(exports.cell, action));\n\n      default:\n        return state.map(inner(exports.cell, action));\n    }\n  }(s, a));\n};\n\nexports.row = function (s, a) {\n  return inline_1.computeRow(optimize_1.optimizeRow(function (state, action) {\n    var reduce = function reduce() {\n      return __assign({}, state, {\n        hover: null,\n        cells: exports.cells(state.cells, action)\n      });\n    };\n\n    switch (action.type) {\n      case cell_1.CELL_INSERT_LEFT_OF:\n        if (!hover_1.isHoveringThis(state, action)) {\n          return reduce();\n        }\n\n        return __assign({}, state, {\n          hover: null,\n          cells: exports.cells([__assign({}, action.item, {\n            id: action.ids[0],\n            inline: null\n          })].concat(state.cells), __assign({}, action, {\n            hover: null\n          }))\n        });\n\n      case cell_1.CELL_INSERT_RIGHT_OF:\n        if (!hover_1.isHoveringThis(state, action)) {\n          return reduce();\n        }\n\n        return __assign({}, state, {\n          hover: null,\n          cells: exports.cells(state.cells.concat([__assign({}, action.item, {\n            id: action.ids[0],\n            inline: null\n          })]), __assign({}, action, {\n            hover: null\n          }))\n        });\n\n      case cell_1.CELL_DRAG_HOVER:\n        if (hover_1.isHoveringThis(state, action)) {\n          return __assign({}, reduce(), {\n            hover: action.position\n          });\n        }\n\n        return reduce();\n\n      default:\n        return reduce();\n    }\n  }(s, a)));\n};\n\nexports.rows = function (s, a) {\n  if (s === void 0) {\n    s = [];\n  }\n\n  return optimize_1.optimizeRows( // tslint:disable-next-line:no-any\n  merge_1.mergeDecorator(a)(function (state, action) {\n    var reduce = function reduce() {\n      return state.map(inner(exports.row, action));\n    };\n\n    switch (action.type) {\n      case cell_1.CELL_INSERT_ABOVE:\n        return state.map(function (r) {\n          return hover_1.isHoveringThis(r, action) ? [__assign({}, editable_1.createRow(), {\n            cells: [__assign({}, action.item, {\n              id: action.ids[1],\n              inline: null\n            })],\n            id: action.ids[0]\n          }), __assign({}, r, {\n            id: action.ids[2]\n          })] : [r];\n        }).reduce(optimize_1.flatten, []).map(inner(exports.row, action));\n\n      case cell_1.CELL_INSERT_BELOW:\n        return state.map(function (r) {\n          return hover_1.isHoveringThis(r, action) ? [__assign({}, r, {\n            id: action.ids[0]\n          }), __assign({}, editable_1.createRow(), {\n            cells: [__assign({}, action.item, {\n              id: action.ids[2],\n              inline: null\n            })],\n            id: action.ids[1]\n          })] : [r];\n        }).reduce(optimize_1.flatten, []).map(inner(exports.row, action));\n\n      default:\n        return reduce();\n    }\n  }(s, a)));\n};","map":null,"metadata":{},"sourceType":"script"}