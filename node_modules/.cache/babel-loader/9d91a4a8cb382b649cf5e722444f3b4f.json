{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bindAndScopeChange_1 = require(\"@guestbell/slate-common/lib/utils/bindAndScopeChange\");\n\nvar options_1 = __importDefault(require(\"./options\"));\n\nvar validation_1 = require(\"./validation\");\n\nvar changes_1 = require(\"./changes\");\n\nvar utils_1 = require(\"./utils\");\n/**\r\n * Returns the core of the plugin, limited to the validation and normalization\r\n * part of `@guestbell/slate-edit-list`, and utils.\r\n *\r\n * Import this directly: `import EditListCore from '@guestbell/slate-edit-list/lib/core'`\r\n * if you don't care about behavior/rendering.\r\n */\n\n\nfunction core( // Options for the plugin\nopts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = new options_1.default(opts);\n\n  return {\n    schema: validation_1.schema(_opts),\n    normalizeNode: validation_1.normalizeNode(_opts),\n    // tslint:disable-next-line:no-console\n    // normalizeNode: node => console.log('normalizeNode: ', node),\n    utils: {\n      getCurrentItem: utils_1.getCurrentItem(_opts),\n      getCurrentList: utils_1.getCurrentList(_opts),\n      getItemDepth: utils_1.getItemDepth(_opts),\n      getItemsAtRange: utils_1.getItemsAtRange(_opts),\n      getPreviousItem: utils_1.getPreviousItem(_opts),\n      isList: utils_1.isList(_opts),\n      isSelectionInList: utils_1.isSelectionInList(_opts)\n    },\n    changes: {\n      decreaseItemDepth: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.decreaseItemDepth),\n      increaseItemDepth: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.increaseItemDepth),\n      splitListItem: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.splitListItem),\n      unwrapList: bindAndScopeChange_1.bindAndScopeChange(_opts, bindAndScopeChangeCondition, changes_1.unwrapList),\n      wrapInList: changes_1.wrapInList(_opts)\n    }\n  };\n}\n\nvar bindAndScopeChangeCondition = function bindAndScopeChangeCondition(opts, editor) {\n  return utils_1.isSelectionInList(opts)(editor.value);\n};\n\nexports.default = core;","map":null,"metadata":{},"sourceType":"script"}