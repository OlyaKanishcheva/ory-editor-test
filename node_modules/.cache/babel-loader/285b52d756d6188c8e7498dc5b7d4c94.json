{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_dom_1 = require(\"react-dom\");\n\nvar hover_1 = __importDefault(require(\"../hover\"));\n\nvar hoverService = new hover_1.default();\n\nexports.computeCurrentDropPosition = function (actions, hover, drag, monitor, component, matrixName) {\n  var mousePosition = monitor.getClientOffset();\n  /* eslint-disable react/no-find-dom-node */\n\n  var componentPosition = react_dom_1.findDOMNode(component).getBoundingClientRect();\n  var room = {\n    height: componentPosition.bottom - componentPosition.top,\n    width: componentPosition.right - componentPosition.left\n  };\n  var mouse = {\n    y: mousePosition.y - componentPosition.top,\n    x: mousePosition.x - componentPosition.left\n  };\n  hoverService.hover(drag, hover, actions, {\n    room: room,\n    mouse: mouse,\n    matrix: matrixName\n  });\n};\n\nexports.computeAndDispatchInsert = function (_a, drag, monitor, component, matrixName) {\n  if (matrixName === void 0) {\n    matrixName = '10x10';\n  }\n\n  var above = _a.insertCellAbove,\n      below = _a.insertCellBelow,\n      leftOf = _a.insertCellLeftOf,\n      rightOf = _a.insertCellRightOf,\n      inlineLeft = _a.insertCellLeftInline,\n      inlineRight = _a.insertCellRightInline,\n      clear = _a.clearHover,\n      hover = __rest(_a, [\"insertCellAbove\", \"insertCellBelow\", \"insertCellLeftOf\", \"insertCellRightOf\", \"insertCellLeftInline\", \"insertCellRightInline\", \"clearHover\"]);\n\n  return exports.computeCurrentDropPosition({\n    clear: clear,\n    above: above,\n    below: below,\n    leftOf: leftOf,\n    rightOf: rightOf,\n    inlineLeft: inlineLeft,\n    inlineRight: inlineRight\n  }, // tslint:disable-next-line:no-any\n  hover, drag, monitor, component, matrixName);\n};\n\nexports.computeAndDispatchHover = function (_a, drag, monitor, component, matrixName) {\n  if (matrixName === void 0) {\n    matrixName = '10x10';\n  }\n\n  var above = _a.cellHoverAbove,\n      below = _a.cellHoverBelow,\n      leftOf = _a.cellHoverLeftOf,\n      rightOf = _a.cellHoverRightOf,\n      inlineLeft = _a.cellHoverInlineLeft,\n      inlineRight = _a.cellHoverInlineRight,\n      clear = _a.clearHover,\n      hover = __rest(_a, [\"cellHoverAbove\", \"cellHoverBelow\", \"cellHoverLeftOf\", \"cellHoverRightOf\", \"cellHoverInlineLeft\", \"cellHoverInlineRight\", \"clearHover\"]);\n\n  return exports.computeCurrentDropPosition({\n    clear: clear,\n    above: above,\n    below: below,\n    leftOf: leftOf,\n    rightOf: rightOf,\n    inlineLeft: inlineLeft,\n    inlineRight: inlineRight\n  }, // tslint:disable-next-line:no-any\n  hover, drag, monitor, component, matrixName);\n};","map":null,"metadata":{},"sourceType":"script"}