{"ast":null,"code":"\"use strict\";\n/*\n * This file is part of ORY Editor.\n *\n * ORY Editor is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * ORY Editor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ORY Editor.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @license LGPL-3.0\n * @copyright 2016-2018 Aeneas Rekkas\n * @author Aeneas Rekkas <aeneas+oss@aeneas.io>\n *\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar uuid_1 = require(\"uuid\");\n\nvar Editable_1 = __importDefault(require(\"./components/Editable\"));\n\nexports.Editable = Editable_1.default;\n\nvar store_1 = __importDefault(require(\"./store\"));\n\nvar actions_1 = require(\"./actions\");\n\nvar selector_1 = require(\"./selector\");\n\nvar plugin_1 = __importDefault(require(\"./service/plugin\"));\n\nexports.PluginService = plugin_1.default;\n\nvar default_1 = __importDefault(require(\"./service/plugin/default\"));\n\nvar forEach_1 = __importDefault(require(\"ramda/src/forEach\"));\n\nvar react_dnd_html5_backend_1 = __importStar(require(\"react-dnd-html5-backend\"));\n\nvar react_dnd_1 = require(\"react-dnd\");\n\nvar reducer_1 = require(\"./reducer\");\n\nexports.oryReducer = reducer_1.oryReducer;\n\nvar const_1 = require(\"./const\");\n\nvar instance;\n\nvar initialState = function initialState() {\n  return {\n    ory: {\n      editables: {\n        past: [],\n        present: [],\n        future: []\n      }\n    }\n  };\n};\n\nvar nativeTypes = function nativeTypes(editor) {\n  return editor.plugins.hasNativePlugin() ? [react_dnd_html5_backend_1.NativeTypes.URL, react_dnd_html5_backend_1.NativeTypes.FILE, react_dnd_html5_backend_1.NativeTypes.TEXT] : [];\n};\n\nvar update = function update(editor) {\n  return function (editable) {\n    var state = editor.plugins.unserialize(editable);\n    actions_1.actions(editor.store.dispatch).editable.update(__assign({}, state, {\n      config: {\n        plugins: editor.plugins,\n        whitelist: editor.plugins.getRegisteredNames().concat(nativeTypes(editor))\n      }\n    }));\n  };\n};\n\nvar dndBackend = react_dnd_html5_backend_1.default;\n/**\n * Editor is the core interface for dealing with the editor.\n */\n\nvar Editor =\n/** @class */\nfunction () {\n  function Editor(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        plugins = _b.plugins,\n        _c = _b.middleware,\n        middleware = _c === void 0 ? [] : _c,\n        _d = _b.editables,\n        editables = _d === void 0 ? [] : _d,\n        _e = _b.defaultPlugin,\n        defaultPlugin = _e === void 0 ? default_1.default : _e,\n        dragDropBackend = _b.dragDropBackend,\n        store = _b.store;\n\n    var _this = this;\n\n    this.query = {};\n\n    this.refreshEditables = function () {\n      forEach_1.default(function (editable) {\n        if (!const_1.isProduction) {\n          // tslint:disable-next-line:no-console\n          console.log(_this.plugins.serialize(editable));\n        } // tslint:disable-next-line:no-any\n\n\n        _this.trigger.editable.update(_this.plugins.serialize(editable));\n      }, _this.store.getState().ory.editables.present);\n    }; // tslint:disable-next-line:no-any\n\n\n    this.setLayoutPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      _this.plugins.setLayoutPlugins(plugins);\n\n      _this.refreshEditables();\n    };\n\n    this.addLayoutPlugin = function (config) {\n      _this.plugins.addLayoutPlugin(config);\n\n      _this.refreshEditables();\n    };\n\n    this.removeLayoutPlugin = function (name) {\n      _this.plugins.removeLayoutPlugin(name);\n\n      _this.refreshEditables();\n    };\n\n    this.setContentPlugins = function (plugins) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      _this.plugins.setContentPlugins(plugins);\n\n      _this.refreshEditables();\n    };\n\n    this.addContentPlugin = function (config) {\n      _this.plugins.addContentPlugin(config);\n\n      _this.refreshEditables();\n    };\n\n    this.removeContentPlugin = function (name) {\n      _this.plugins.removeContentPlugin(name);\n\n      _this.refreshEditables();\n    };\n\n    if (instance) {\n      console.warn('You defined multiple instances of the Editor class, this can cause problems.');\n    }\n\n    instance = this;\n    this.store = store || store_1.default(initialState(), middleware);\n    this.plugins = new plugin_1.default(plugins);\n    this.middleware = middleware;\n    this.trigger = actions_1.actions(this.store.dispatch);\n    this.query = selector_1.selectors(this.store);\n    this.defaultPlugin = defaultPlugin;\n    this.dragDropContext = react_dnd_1.DragDropContext(dragDropBackend || dndBackend); // tslint:disable-next-line:no-any\n\n    this.trigger.editable.add = update(this); // tslint:disable-next-line:no-any\n\n    this.trigger.editable.update = update(this);\n    editables.forEach(this.trigger.editable.add);\n  }\n\n  return Editor;\n}();\n\nexports.Editor = Editor;\n\nexports.createEmptyState = function () {\n  return {\n    id: uuid_1.v4(),\n    cells: []\n  };\n};\n\nexports.default = Editor;","map":null,"metadata":{},"sourceType":"script"}